# Direnv configuration for AWBot development environment
# This file automatically activates the Nix development shell and Python virtual environment
# when you enter the project directory (requires direnv to be installed and hooked)

# Use the Nix flake development shell
use flake

# Set project root
export PROJECT_ROOT=$(pwd)
export VENV_PATH="$PROJECT_ROOT/.venv"
export ENGINES_DIR="$PROJECT_ROOT/.prisma-engines"

# Activate Python virtual environment if it exists
if [ -d "$VENV_PATH" ]; then
    source "$VENV_PATH/bin/activate"
    echo "‚úÖ Python virtual environment activated"
else
    echo "‚ö†Ô∏è  Python virtual environment not found at $VENV_PATH"
    echo "   Run 'nix develop' to set it up automatically"
fi

# Set up environment variables for development
export PYTHONPATH="$PROJECT_ROOT:$PYTHONPATH"
export PATH="$VENV_PATH/bin:$PATH"

# Prisma engine environment variables
export PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING=1
export PRISMA_QUERY_ENGINE_BINARY="$ENGINES_DIR/query-engine"
export PRISMA_SCHEMA_ENGINE_BINARY="$ENGINES_DIR/schema-engine"
export PRISMA_FMT_BINARY="$ENGINES_DIR/prisma-fmt"
export PRISMA_BINARIES_MIRROR="https://binaries.prisma.sh"
export PRISMA_ENGINES_MIRROR="https://binaries.prisma.sh"
export PRISMA_CLI_BINARY_TARGETS="linux-musl,native"

# Poetry configuration
export POETRY_VENV_PATH="$VENV_PATH"
export POETRY_ACTIVE=1

# Development-specific environment variables
export ENVIRONMENT="development"
export DEBUG=1

# Load .env file if it exists
if [ -f ".env" ]; then
    dotenv
fi

echo "üöÄ AWBot development environment loaded"
echo "üìç Project root: $PROJECT_ROOT"
echo "üêç Virtual environment: $VENV_PATH"
echo "üîß Prisma engines: $ENGINES_DIR"