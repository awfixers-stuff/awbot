name: Docker
on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: 0 2 15 * *
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILD_SUMMARY: true
  DOCKER_BUILD_CHECKS_ANNOTATIONS: true
jobs:
  validate:
    name: Validate Build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
      - name: Prepare version info
        id: version
        run: |
          VERSION="pr-${{ github.event.number }}-$(echo "${{ github.sha }}" | cut -c1-7)"
          {
            echo "version=$VERSION"
            echo "git_sha=${{ github.sha }}"
            echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          } >> "$GITHUB_OUTPUT"
      - name: Build for validation (Git context)
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        timeout-minutes: 10
        with:
          target: production
          push: false
          load: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: awbot:pr-${{ github.event.number }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            GIT_SHA=${{ steps.version.outputs.git_sha }}
            BUILD_DATE=${{ steps.version.outputs.build_date }}
          annotations: |
            org.opencontainers.image.title="awbot"
            org.opencontainers.image.description="awbot - The all in one discord bot for the AJ's Basement Community"
            org.opencontainers.image.source="https://github.com/awfixers-stuff/awbot"
            org.opencontainers.image.licenses="GPL-3.0"
            org.opencontainers.image.authors="AWFixer and Friends"
            org.opencontainers.image.vendor="AWFixer and Friends"
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.documentation="https://github.com/awfixers-stuff/awbot/blob/main/README.md"
      - name: Validation complete
        run: |
          echo "✅ Docker build validation completed successfully"
          echo "🔍 Build cache updated for faster future builds"
  build:
    name: Build & Push
    if: github.event_name != 'pull_request'
    needs:
      - validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      actions: read
      id-token: write
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
      - name: Prepare version info
        id: version
        run: |
          if EXACT_TAG=$(git describe --tags --exact-match 2>/dev/null); then
            VERSION=${EXACT_TAG#v}
          elif TAG_DESC=$(git describe --tags --always 2>/dev/null); then
            VERSION=${TAG_DESC#v}
          else
            VERSION="$(date +'%Y%m%d')-$(echo "${{ github.sha }}" | cut -c1-7)"
          fi
          {
            echo "version=$VERSION"
            echo "git_sha=${{ github.sha }}"
            echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          } >> "$GITHUB_OUTPUT"
          echo "Using version: $VERSION"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3
        with:
          platforms: linux/amd64,linux/arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
      - name: Log in to Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
          labels: |
            org.opencontainers.image.title="awbot"
            org.opencontainers.image.description="awbot - The all in one discord bot for the AJ's Basement Community"
            org.opencontainers.image.source="https://github.com/${{ github.repository }}"
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses="GPL-3.0"
            org.opencontainers.image.authors="AWFixer and Friends"
            org.opencontainers.image.vendor="AWFixer and Friends"
            org.opencontainers.image.documentation="https://github.com/awfixers-stuff/awbot/blob/main/README.md"
      - name: Build and push
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        timeout-minutes: 20
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && contains(github.ref, 'v')) && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
          provenance: ${{ startsWith(github.ref, 'refs/tags/') }}
          sbom: ${{ startsWith(github.ref, 'refs/tags/') }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            VERSION=${{ steps.version.outputs.version }}
            GIT_SHA=${{ steps.version.outputs.git_sha }}
            BUILD_DATE=${{ steps.version.outputs.build_date }}
      - name: Test pushed image
        run: |
          docker run --rm --name awbot-prod-test \
            --entrypoint python \
            "$(echo '${{ steps.meta.outputs.tags }}' | head -1)" \
            -c "import awbot; import sqlite3; import asyncio; print('🔍 Testing production image...'); print('✅ Bot imports successfully'); print('✅ Dependencies available'); conn = sqlite3.connect(':memory:'); conn.close(); print('✅ Database connectivity working'); print('🎉 Production image verified!')"
  security:
    name: Security Scan
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
      - name: Get first image tag
        id: first_tag
        run:
          echo "image=$(echo '${{ needs.build.outputs.image }}' | head -1)" >>
          "$GITHUB_OUTPUT"
      - name: Cache Trivy
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: ~/.cache/trivy
          key: cache-trivy-${{ hashFiles('Dockerfile') }}-${{ github.run_id }}
          restore-keys: |
            cache-trivy-${{ hashFiles('Dockerfile') }}-
            cache-trivy-
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.first_tag.outputs.image }}
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
          scanners: vuln
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@51f77329afa6477de8c49fc9c7046c15b9a4e79d # v3
        with:
          sarif_file: trivy-results.sarif
  cleanup:
    name: Registry Cleanup
    if:
      github.event_name != 'pull_request' && (github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Delete old container versions
        uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55 # v5
        with:
          package-name: awbot
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: false
      - name: Delete buildcache images
        continue-on-error: true
        run: |
          echo "Cleaning up any remaining buildcache images..."
